# S_HOOD level ---------------------------------------------
## changing grouping variables to factors
FM_prop_shood_change$ACS.Vintage <- as.factor(FM_prop_shood_change$ACS.Vintage)
FM_prop_shood_change$S_HOOD <- as.factor(FM_prop_shood_change$S_HOOD)
## fem prop
F_census <-
FM_prop_shood_change %>%
ggplot(., aes(x = ACS.Vintage, y = F_prop, colour = S_HOOD)) +
geom_point() +
geom_line(aes(group = S_HOOD)) +
coord_cartesian(ylim = c(0, 1)) +
theme(legend.position = "right") +
labs(x = "Year", y = "Proportion of women", title = "Census Data") +
scale_x_discrete(labels = c("2020", "2022"))
## masc prop
M_census <-
FM_prop_shood_change %>%
ggplot(., aes(x = ACS.Vintage, y = M_prop, colour = S_HOOD)) +
geom_point() +
geom_line(aes(group = S_HOOD)) +
coord_cartesian(ylim = c(0, 1)) +
theme(legend.position = "right") +
labs(x = "Year", y = "Proportion of men", title = "Census Data") +
scale_x_discrete(labels = c("2020", "2022"))
SPL_1823 <- read.csv(here("data","SPL_1823.csv"))
SPL_1823 <- SPL_1823 %>%
mutate(
gender=recode(staying_gender,
"Female"="Fem",
"Feminine presenting"="Fem",
"Gender-non-conforming presenting" = "non_conforming",
"Male"="Masc",
"Masculine presenting"="Masc",
"Other_Unsure"="Unsure",
"Unsure"="Unsure"))
# instead of doing a f:m ratio, calculate the proportion of total observed that are women/men
SPL_FM_prop_shood <- SPL_1823 %>%
group_by(S_HOOD, gender, study_id) %>%
dplyr::summarise(count= n()) %>%
pivot_wider(
id_cols = c(S_HOOD, study_id),
names_from = gender,
values_from = count,
names_prefix = "Observed_"
) %>%
rowwise() %>% #this is to make sure the total is calculated correctly in the next line
dplyr::mutate(total = sum(c_across(Observed_Fem:Observed_non_conforming), na.rm=T)) %>% #calculate total observed, including observations where no one was observed!
mutate_at(vars(Observed_Fem, Observed_Masc, Observed_non_conforming, Observed_Unsure), ~replace_na(., 0)) %>% #replace NAs with 0s so that the calculated proportions return 0 and not NA
mutate(F_prop = Observed_Fem/total,
M_prop = Observed_Masc/total) %>%
select(S_HOOD, study_id, F_prop, M_prop, Observed_Fem, Observed_Masc, total)
# S_HOOD level ---------------------------------------------
## filter dataframe so that there are the same 11 S_HOODS
filt_SPL_FM_prop_shood <- SPL_FM_prop_shood %>% filter(S_HOOD %in% neighborhoods_with_both_years)
## fem prop
F_SPL <-
filt_SPL_FM_prop_shood %>%
ggplot(., aes(x = study_id, y = F_prop, colour = S_HOOD)) +
geom_point() +
geom_line(aes(group = S_HOOD)) +
coord_cartesian(ylim = c(0, 1)) +
theme(legend.position = "none") +
labs(x = "Year", y = "Proportion of women", title = "SPL Data") +
scale_x_discrete(labels = c("2018", "2023"))
## masc prop
M_SPL <-
filt_SPL_FM_prop_shood %>%
ggplot(., aes(x = study_id, y = M_prop, colour = S_HOOD)) +
geom_point() +
geom_line(aes(group = S_HOOD)) +
coord_cartesian(ylim = c(0, 1)) +
theme(legend.position = "none") +
labs(x = "Year", y = "Proportion of men", title = "SPL Data") +
scale_x_discrete(labels = c("2018", "2023"))
grid.arrange(F_SPL, F_census, ncol = 2)
library(cowplot)
# S_HOOD level ---------------------------------------------
## changing grouping variables to factors
FM_prop_shood_change$ACS.Vintage <- as.factor(FM_prop_shood_change$ACS.Vintage)
FM_prop_shood_change$S_HOOD <- as.factor(FM_prop_shood_change$S_HOOD)
## fem prop
F_census <-
FM_prop_shood_change %>%
ggplot(., aes(x = ACS.Vintage, y = F_prop, colour = S_HOOD)) +
geom_point() +
geom_line(aes(group = S_HOOD)) +
coord_cartesian(ylim = c(0, 1)) +
theme(legend.position = "none") +
labs(x = "Year", y = "Proportion of women", title = "Census Data") +
scale_x_discrete(labels = c("2020", "2022"))
## masc prop
M_census <-
FM_prop_shood_change %>%
ggplot(., aes(x = ACS.Vintage, y = M_prop, colour = S_HOOD)) +
geom_point() +
geom_line(aes(group = S_HOOD)) +
coord_cartesian(ylim = c(0, 1)) +
theme(legend.position = "none") +
labs(x = "Year", y = "Proportion of men", title = "Census Data") +
scale_x_discrete(labels = c("2020", "2022"))
legend <- get_legend(F_SPL)
combined_plot <- plot_grid(F_SPL, F_Census, ncol = 2)
combined_plot <- plot_grid(F_SPL, F_census, ncol = 2)
legend <- get_legend(F_SPL)
combined_plot_with_legend <- plot_grid(combined_plot, legend, ncol = 1, rel_heights = c(1, 0.1))
combined_plot_with_legend
## fem prop
F_census <-
FM_prop_shood_change %>%
ggplot(., aes(x = ACS.Vintage, y = F_prop, colour = S_HOOD)) +
geom_point() +
geom_line(aes(group = S_HOOD)) +
coord_cartesian(ylim = c(0, 1)) +
labs(x = "Year", y = "Proportion of women", title = "Census Data") +
scale_x_discrete(labels = c("2020", "2022"))
## fem prop
F_SPL <-
filt_SPL_FM_prop_shood %>%
ggplot(., aes(x = study_id, y = F_prop, colour = S_HOOD)) +
geom_point() +
geom_line(aes(group = S_HOOD)) +
coord_cartesian(ylim = c(0, 1)) +
labs(x = "Year", y = "Proportion of women", title = "SPL Data") +
scale_x_discrete(labels = c("2018", "2023"))
combined_plot <- plot_grid(F_SPL, F_census, ncol = 2)
legend <- get_legend(F_SPL)
combined_plot_with_legend <- plot_grid(combined_plot, legend, ncol = 1, rel_heights = c(1, 0.1))
combined_plot_with_legend
## fem prop
F_SPL <-
filt_SPL_FM_prop_shood %>%
ggplot(., aes(x = study_id, y = F_prop, colour = S_HOOD)) +
geom_point() +
geom_line(aes(group = S_HOOD)) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(0, 1)) +
labs(x = "Year", y = "Proportion of women", title = "SPL Data") +
scale_x_discrete(labels = c("2018", "2023"))
combined_plot <- plot_grid(F_SPL, F_census, ncol = 2)
legend <- get_legend(F_census)
combined_plot_with_legend <- plot_grid(combined_plot, legend, ncol = 1, rel_heights = c(1, 0.1))
combined_plot_with_legend
## fem prop
F_SPL <-
filt_SPL_FM_prop_shood %>%
ggplot(., aes(x = study_id, y = F_prop, colour = S_HOOD)) +
geom_point() +
geom_line(aes(group = S_HOOD)) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(0, 1)) +
labs(x = "Year", y = "Proportion of women", title = "SPL Data") +
scale_x_discrete(labels = c("2018", "2023"))
combined_plot <- plot_grid(F_SPL, F_census, ncol = 2)
legend <- get_legend(F_census)
combined_plot_with_legend <- plot_grid(combined_plot, legend, ncol = 1, rel_heights = c(1, 0.1))
combined_plot_with_legend
# Combine plots side by side without the legends
combined_plot <- plot_grid(F_census + theme(legend.position = "none"), F_SPL + theme(legend.position = "none"), ncol = 2)
# Add the legend to the combined plot at the bottom
combined_plot_with_legend <- plot_grid(combined_plot, legend, ncol = 1, rel_heights = c(1, 0.1))
combined_plot_with_legend
legend <- cowplot::get_legend(F_census)
# Combine plots side by side without the legends
combined_plot <- plot_grid(F_census + theme(legend.position = "none"), F_SPL + theme(legend.position = "none"), ncol = 2)
# Add some padding around the legend
legent <- legend + theme(legend.margin = margin(10, 10, 10, 10))
# Add the legend to the combined plot at the bottom
combined_plot_with_legend <- plot_grid(combined_plot, legend, ncol = 1, rel_heights = c(1, 0.1))
combined_plot_with_legend
legend <- cowplot::get_legend(F_census)
# Combine plots side by side without the legends
combined_plot <- plot_grid(F_census + theme(legend.position = "none"), F_SPL + theme(legend.position = "none"), ncol = 2)
# Add some padding around the legend
legend <- legend + theme(legend.margin = margin(10, 10, 10, 10))
# Add the legend to the combined plot at the bottom
combined_plot_with_legend <- plot_grid(combined_plot, legend, ncol = 1, rel_heights = c(1, 0.1))
combined_plot_with_legend
legend <- cowplot::get_legend(F_census)
# Combine plots side by side without the legends
combined_plot <- plot_grid(F_census + theme(legend.position = "none"), F_SPL + theme(legend.position = "none"), ncol = 2)
# Add some padding around the legend
legend <- legend + theme(legend.margin = margin(10, 10, 10, 10))
# Add the legend to the combined plot at the bottom
combined_plot_with_legend <- plot_grid(combined_plot, NULL, legend, ncol = 3, rel_widths = c(1, 0.05, 0.5))
combined_plot_with_legend
legend <- cowplot::get_legend(F_census)
# Combine plots side by side without the legends
combined_plot <- plot_grid(F_census + theme(legend.position = "none"), F_SPL + theme(legend.position = "none"), ncol = 2)
# Add the legend to the combined plot at the bottom
combined_plot_with_legend <- plot_grid(combined_plot, NULL, legend, ncol = 3, rel_widths = c(1, 0.05, 0.5))
combined_plot_with_legend
legend <- cowplot::get_legend(F_census)
# Combine plots side by side without the legends
combined_plot <- plot_grid(F_census + theme(legend.position = "none"), F_SPL + theme(legend.position = "none"), ncol = 2)
# Add the legend to the combined plot at the bottom
combined_plot_with_legend <- plot_grid(combined_plot, NULL, legend, ncol = 3, rel_widths = c(1.5, 0.05, 0.5))
combined_plot_with_legend
legend <- cowplot::get_legend(F_census)
# Combine plots side by side without the legends
combined_plot <- plot_grid(F_census + theme(legend.position = "none"), F_SPL + theme(legend.position = "none"), ncol = 2)
# Add the legend to the combined plot at the bottom
combined_plot_with_legend <- plot_grid(combined_plot, NULL, legend, ncol = 3, rel_widths = c(2, 0.05, 0.5))
combined_plot_with_legend
legend <- cowplot::get_legend(F_census)
# Combine plots side by side without the legends
combined_plot <- plot_grid(F_census + theme(legend.position = "none"), F_SPL + theme(legend.position = "none"), ncol = 2)
# Add the legend to the combined plot at the bottom
combined_plot_with_legend <- plot_grid(combined_plot, NULL, legend, ncol = 3, rel_widths = c(2, 0.05, 0.5), title = "Proportion of Women by Dataset")
combined_plot_with_legend
legend <- cowplot::get_legend(F_census)
# Combine plots side by side without the legends
combined_plot <- plot_grid(F_census + theme(legend.position = "none"), F_SPL + theme(legend.position = "none"), ncol = 2)
# Add the legend to the combined plot at the bottom
combined_plot_with_legend <- plot_grid(combined_plot, NULL, legend, ncol = 3, rel_widths = c(2, 0.05, 0.5))
combined_plot_with_legend
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
library(here)
library(gridExtra)
library(cowplot)
census_2022 <- read.csv(here("data","census_2022_demographics.csv"))
# Calculate the proportion of total pop per S_HOOD and year that are women/men
FM_prop_shood <- census_2022 %>%
group_by(S_HOOD, ACS.Vintage) %>%
mutate(F_prop = Female.x/Total.population.x,
M_prop = Male.x/Total.population.x)
# Group by neighborhood and count unique years
neighborhood_year_counts <- FM_prop_shood %>%
group_by(S_HOOD) %>%
summarise(unique_years = n_distinct(ACS.Vintage))
# Filter neighborhoods with only 2 unique years
neighborhoods_with_both_years <- neighborhood_year_counts %>%
filter(unique_years == 2) %>%
pull(S_HOOD)
# Filter original df to include only the neighborhoods with both years
filt_FM_prop_shood <- FM_prop_shood %>%
filter(S_HOOD %in% neighborhoods_with_both_years)
## Left with 11 neighborhoods ##
# raw deltas (2020 - 2022) ------------------------------
# Make a smaller dataframe that includes just the census data columns and one row per neighborhood and year
FM_prop_shood_change <- filt_FM_prop_shood %>%
select(S_HOOD, neighborhood, Total.population.x:M_prop) %>%
distinct(S_HOOD, .keep_all = TRUE)
# M_prop change per neighborhood
FM_prop_shood_change %>% group_by(S_HOOD) %>%
summarise(M_prop_change = M_prop[ACS.Vintage == '5Y22'] - M_prop[ACS.Vintage == '5Y20'])
# F_prop change per neighborhood
FM_prop_shood_change %>% group_by(S_HOOD) %>%
summarise(F_prop_change = F_prop[ACS.Vintage == '5Y22'] - F_prop[ACS.Vintage == '5Y20'])
# S_HOOD level ---------------------------------------------
## changing grouping variables to factors
FM_prop_shood_change$ACS.Vintage <- as.factor(FM_prop_shood_change$ACS.Vintage)
FM_prop_shood_change$S_HOOD <- as.factor(FM_prop_shood_change$S_HOOD)
## fem prop
F_census <-
FM_prop_shood_change %>%
ggplot(., aes(x = ACS.Vintage, y = F_prop, colour = S_HOOD)) +
geom_point() +
geom_line(aes(group = S_HOOD)) +
coord_cartesian(ylim = c(0, 1)) +
labs(x = "Year", y = "Proportion of women", title = "Census Data") +
scale_x_discrete(labels = c("2020", "2022"))
## masc prop
M_census <-
FM_prop_shood_change %>%
ggplot(., aes(x = ACS.Vintage, y = M_prop, colour = S_HOOD)) +
geom_point() +
geom_line(aes(group = S_HOOD)) +
coord_cartesian(ylim = c(0, 1)) +
theme(legend.position = "none") +
labs(x = "Year", y = "Proportion of men", title = "Census Data") +
scale_x_discrete(labels = c("2020", "2022"))
SPL_1823 <- read.csv(here("data","SPL_1823.csv"))
SPL_1823 <- SPL_1823 %>%
mutate(
gender=recode(staying_gender,
"Female"="Fem",
"Feminine presenting"="Fem",
"Gender-non-conforming presenting" = "non_conforming",
"Male"="Masc",
"Masculine presenting"="Masc",
"Other_Unsure"="Unsure",
"Unsure"="Unsure"))
# instead of doing a f:m ratio, calculate the proportion of total observed that are women/men
SPL_FM_prop_shood <- SPL_1823 %>%
group_by(S_HOOD, gender, study_id) %>%
dplyr::summarise(count= n()) %>%
pivot_wider(
id_cols = c(S_HOOD, study_id),
names_from = gender,
values_from = count,
names_prefix = "Observed_"
) %>%
rowwise() %>% #this is to make sure the total is calculated correctly in the next line
dplyr::mutate(total = sum(c_across(Observed_Fem:Observed_non_conforming), na.rm=T)) %>% #calculate total observed, including observations where no one was observed!
mutate_at(vars(Observed_Fem, Observed_Masc, Observed_non_conforming, Observed_Unsure), ~replace_na(., 0)) %>% #replace NAs with 0s so that the calculated proportions return 0 and not NA
mutate(F_prop = Observed_Fem/total,
M_prop = Observed_Masc/total) %>%
select(S_HOOD, study_id, F_prop, M_prop, Observed_Fem, Observed_Masc, total)
# S_HOOD level ---------------------------------------------
## filter dataframe so that there are the same 11 S_HOODS
filt_SPL_FM_prop_shood <- SPL_FM_prop_shood %>% filter(S_HOOD %in% neighborhoods_with_both_years)
## fem prop
F_SPL <-
filt_SPL_FM_prop_shood %>%
ggplot(., aes(x = study_id, y = F_prop, colour = S_HOOD)) +
geom_point() +
geom_line(aes(group = S_HOOD)) +
coord_cartesian(ylim = c(0, 1)) +
labs(x = "Year", y = "Proportion of women", title = "SPL Data") +
scale_x_discrete(labels = c("2018", "2023"))
## masc prop
M_SPL <-
filt_SPL_FM_prop_shood %>%
ggplot(., aes(x = study_id, y = M_prop, colour = S_HOOD)) +
geom_point() +
geom_line(aes(group = S_HOOD)) +
coord_cartesian(ylim = c(0, 1)) +
theme(legend.position = "none") +
labs(x = "Year", y = "Proportion of men", title = "SPL Data") +
scale_x_discrete(labels = c("2018", "2023"))
F_legend <- cowplot::get_legend(F_census)
# Combine plots side by side without the legends
F_combined_plot <- plot_grid(F_census + theme(legend.position = "none"), F_SPL + theme(legend.position = "none"), ncol = 2)
# Add the legend to the combined plot at the bottom
F_combined_plot_with_legend <- plot_grid(F_combined_plot, NULL, F_legend, ncol = 3, rel_widths = c(2, 0.05, 0.5))
F_combined_plot_with_legend
ggsave(filename = "census+SPL_F_prop_scatterconnect.png", path = here("Visualization"), bg="white", width = 7, height = 7)
M_legend <- cowplot::get_legend(M_census)
# Combine plots side by side without the legends
M_combined_plot <- plot_grid(M_census + theme(legend.position = "none"), M_SPL + theme(legend.position = "none"), ncol = 2)
# Add the legend to the combined plot at the bottom
M_combined_plot_with_legend <- plot_grid(M_combined_plot, NULL, M_legend, ncol = 3, rel_widths = c(2, 0.05, 0.5))
M_combined_plot_with_legend
ggsave(filename = "census+SPL_F_prop_scatterconnect.png", path = here("Visualization"), bg="white", width = 7, height = 7)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
library(here)
library(gridExtra)
library(cowplot)
census_2022 <- read.csv(here("data","census_2022_demographics.csv"))
# Calculate the proportion of total pop per S_HOOD and year that are women/men
FM_prop_shood <- census_2022 %>%
group_by(S_HOOD, ACS.Vintage) %>%
mutate(F_prop = Female.x/Total.population.x,
M_prop = Male.x/Total.population.x)
# Group by neighborhood and count unique years
neighborhood_year_counts <- FM_prop_shood %>%
group_by(S_HOOD) %>%
summarise(unique_years = n_distinct(ACS.Vintage))
# Filter neighborhoods with only 2 unique years
neighborhoods_with_both_years <- neighborhood_year_counts %>%
filter(unique_years == 2) %>%
pull(S_HOOD)
# Filter original df to include only the neighborhoods with both years
filt_FM_prop_shood <- FM_prop_shood %>%
filter(S_HOOD %in% neighborhoods_with_both_years)
## Left with 11 neighborhoods ##
# raw deltas (2020 - 2022) ------------------------------
# Make a smaller dataframe that includes just the census data columns and one row per neighborhood and year
FM_prop_shood_change <- filt_FM_prop_shood %>%
select(S_HOOD, neighborhood, Total.population.x:M_prop) %>%
distinct(S_HOOD, .keep_all = TRUE)
# M_prop change per neighborhood
FM_prop_shood_change %>% group_by(S_HOOD) %>%
summarise(M_prop_change = M_prop[ACS.Vintage == '5Y22'] - M_prop[ACS.Vintage == '5Y20'])
# F_prop change per neighborhood
FM_prop_shood_change %>% group_by(S_HOOD) %>%
summarise(F_prop_change = F_prop[ACS.Vintage == '5Y22'] - F_prop[ACS.Vintage == '5Y20'])
# S_HOOD level ---------------------------------------------
## changing grouping variables to factors
FM_prop_shood_change$ACS.Vintage <- as.factor(FM_prop_shood_change$ACS.Vintage)
FM_prop_shood_change$S_HOOD <- as.factor(FM_prop_shood_change$S_HOOD)
## fem prop
F_census <-
FM_prop_shood_change %>%
ggplot(., aes(x = ACS.Vintage, y = F_prop, colour = S_HOOD)) +
geom_point() +
geom_line(aes(group = S_HOOD)) +
coord_cartesian(ylim = c(0, 1)) +
labs(x = "Year", y = "Proportion of women", title = "Census Data") +
scale_x_discrete(labels = c("2020", "2022"))
## masc prop
M_census <-
FM_prop_shood_change %>%
ggplot(., aes(x = ACS.Vintage, y = M_prop, colour = S_HOOD)) +
geom_point() +
geom_line(aes(group = S_HOOD)) +
coord_cartesian(ylim = c(0, 1)) +
labs(x = "Year", y = "Proportion of men", title = "Census Data") +
scale_x_discrete(labels = c("2020", "2022"))
SPL_1823 <- read.csv(here("data","SPL_1823.csv"))
SPL_1823 <- SPL_1823 %>%
mutate(
gender=recode(staying_gender,
"Female"="Fem",
"Feminine presenting"="Fem",
"Gender-non-conforming presenting" = "non_conforming",
"Male"="Masc",
"Masculine presenting"="Masc",
"Other_Unsure"="Unsure",
"Unsure"="Unsure"))
# instead of doing a f:m ratio, calculate the proportion of total observed that are women/men
SPL_FM_prop_shood <- SPL_1823 %>%
group_by(S_HOOD, gender, study_id) %>%
dplyr::summarise(count= n()) %>%
pivot_wider(
id_cols = c(S_HOOD, study_id),
names_from = gender,
values_from = count,
names_prefix = "Observed_"
) %>%
rowwise() %>% #this is to make sure the total is calculated correctly in the next line
dplyr::mutate(total = sum(c_across(Observed_Fem:Observed_non_conforming), na.rm=T)) %>% #calculate total observed, including observations where no one was observed!
mutate_at(vars(Observed_Fem, Observed_Masc, Observed_non_conforming, Observed_Unsure), ~replace_na(., 0)) %>% #replace NAs with 0s so that the calculated proportions return 0 and not NA
mutate(F_prop = Observed_Fem/total,
M_prop = Observed_Masc/total) %>%
select(S_HOOD, study_id, F_prop, M_prop, Observed_Fem, Observed_Masc, total)
# S_HOOD level ---------------------------------------------
## filter dataframe so that there are the same 11 S_HOODS
filt_SPL_FM_prop_shood <- SPL_FM_prop_shood %>% filter(S_HOOD %in% neighborhoods_with_both_years)
## fem prop
F_SPL <-
filt_SPL_FM_prop_shood %>%
ggplot(., aes(x = study_id, y = F_prop, colour = S_HOOD)) +
geom_point() +
geom_line(aes(group = S_HOOD)) +
coord_cartesian(ylim = c(0, 1)) +
labs(x = "Year", y = "Proportion of women", title = "SPL Data") +
scale_x_discrete(labels = c("2018", "2023"))
## masc prop
M_SPL <-
filt_SPL_FM_prop_shood %>%
ggplot(., aes(x = study_id, y = M_prop, colour = S_HOOD)) +
geom_point() +
geom_line(aes(group = S_HOOD)) +
coord_cartesian(ylim = c(0, 1)) +
theme(legend.position = "none") +
labs(x = "Year", y = "Proportion of men", title = "SPL Data") +
scale_x_discrete(labels = c("2018", "2023"))
F_legend <- cowplot::get_legend(F_census)
# Combine plots side by side without the legends
F_combined_plot <- plot_grid(F_census + theme(legend.position = "none"), F_SPL + theme(legend.position = "none"), ncol = 2)
# Add the legend to the combined plot at the bottom
F_combined_plot_with_legend <- plot_grid(F_combined_plot, NULL, F_legend, ncol = 3, rel_widths = c(2, 0.05, 0.5))
F_combined_plot_with_legend
ggsave(filename = "census+SPL_F_prop_scatterconnect.png", path = here("Visualization"), bg="white", width = 7, height = 7)
M_legend <- cowplot::get_legend(M_census)
# Combine plots side by side without the legends
M_combined_plot <- plot_grid(M_census + theme(legend.position = "none"), M_SPL + theme(legend.position = "none"), ncol = 2)
# Add the legend to the combined plot at the bottom
M_combined_plot_with_legend <- plot_grid(M_combined_plot, NULL, M_legend, ncol = 3, rel_widths = c(2, 0.05, 0.5))
M_combined_plot_with_legend
ggsave(filename = "census+SPL_F_prop_scatterconnect.png", path = here("Visualization"), bg="white", width = 7, height = 7)
library(tidyverse)
library(here)
#Census data from: https://data-seattlecitygis.opendata.arcgis.com/datasets/SeattleCityGIS::selected-demographic-and-housing-estimates-dp05/about
#Census data from Seattle from 2010-2022
demo_data <- read.csv(here("data/Raw","05_SPL_Demographics.csv"))
#Clean SPL 2018 and 2023 data
SPL_data <- read.csv(here("data", "SPL_1823.csv"))
demo_data <- demo_data %>% mutate(neighborhood = recode(Community.Reporting.Area.Name,
"Alki/Admiral" = "Alki",
"Downtown Commercial Core" = "Commercial Core",
"West Seattle Junction/Genesee Hill" = "West Seattle Junction",
"Greenwood/Phinney Ridge" = "Greenwood - Phinney Ridge",
"First Hill" = "First Hill / 12th Ave",
"Highland Park" = "Westwood - Highland Park",
"Roxhill/Westwood" = "Westwood - Highland Park",
"Miller Park" = "Madison Miller",
"Mt. Baker/North Rainier" = "Mt Baker",
"North Beacon Hill/Jefferson Park" = "North Beacon Hill",
"Northgate/Maple Leaf" = "Northgate",
"Olympic Hills/Victory Heights" = "Lake City",
"Wedgwood/View Ridge" = "Wedgwood",
"Queen Anne" = "Upper Queen Anne")) #Recoding QA into UQA because census dataset does not specify
## Note that need to update original cleaning code to fix= First Hill / 12th Ave (not broadview) and 23rd and jackson (not pinehurst)
# 2018 data
##Creating a 2018 specific staying dataframe
SPL2018 <- SPL_data %>% filter(study_id == "2018_Seattle_Citywide") %>%
rename("neighborhood" = "location_neighborhood")
table(SPL2018$neighborhood)
##Filtering census data to 2020 only (closest year to 2018 that is available)
demo2018 <- demo_data %>% filter(ACS.Vintage == "5Y20")
##Summing up total counts for each demo category per neighborhood
summarised_data <- demo2018 %>% group_by(neighborhood) %>% summarise(across(Total.population:Total.Housing.Units, sum))
demo2018_avg <- demo2018 %>% left_join(summarised_data, by = "neighborhood")
##Merging both dataframes by the neighborhood column
merged2018 <- merge(SPL2018, demo2018_avg, by = "neighborhood", all = FALSE)
##Filtering so that there is just one row per unique_staying_id
merged2018 <- distinct(merged2018, unique_staying_id, .keep_all = TRUE)
# 2023 data
##Creating a 2023 specific staying dataframe
SPL2023 <- SPL_data %>% filter(study_id == "2023_Seattle_Citywide") %>%
rename("neighborhood" = "location_neighborhood")
##Filtering census data to 2022 only (closest year to 2023 that is available)
demo2023 <- demo_data %>% filter(ACS.Vintage == "5Y22")
##Summing up total counts for each demo category per neighborhood
summarised_data <- demo2023 %>% group_by(neighborhood) %>% summarise(across(Total.population:Total.Housing.Units, sum))
demo2023_avg <- demo2023 %>% left_join(summarised_data, by = "neighborhood")
##Merging both dataframes by the neighborhood column
merged2023 <- merge(SPL2023, demo2023_avg, by = "neighborhood", all = FALSE)
##Filtering so that there is just one row per unique_staying_id
merged2023 <- distinct(merged2023, unique_staying_id, .keep_all = TRUE)
# Creating one big dataframe for 2018 and 2023 data
SPL_1823_demographics <- rbind(merged2018, merged2023)
##Cleaning it up
SPL_1823_demographics <- SPL_1823_demographics %>% dplyr::select(neighborhood:study_id, staying_time_start:ACS.Vintage) #not importing location_id bc it's too granular and innaccurate now
##Saving it
write.csv(SPL_1823_demographics, here("data", "census_SPL_combined.csv"))
