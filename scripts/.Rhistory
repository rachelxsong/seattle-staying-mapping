"Gender-non-conforming presenting" = "non_conforming",
"Male"="Masc",
"Masculine presenting"="Masc",
"Other_Unsure"="Unsure",
"Unsure"="Unsure"))
# table(SPL_1823$gender)
# table(SPL_1823$staying_gender)
FM_ratio <- SPL_1823 %>%
group_by(S_HOOD, gender, study_id) %>%
dplyr::summarise(count= n()) %>%
pivot_wider(
id_cols = c(S_HOOD, study_id),
names_from = gender,
values_from = count,
names_prefix = "Observed_"
) %>%
mutate(FM_ratio = round(Observed_Fem/Observed_Masc, 2)) %>%
select(S_HOOD, study_id, FM_ratio)
FM_ratio_locid <- SPL_1823 %>%
group_by(location_id, gender, study_id) %>%
dplyr::summarise(count = n()) %>%
pivot_wider(
id_cols = c(location_id, study_id),
names_from = gender,
values_from = count,
names_prefix = "Observed_"
) %>%
mutate(FM_ratio = round(Observed_Fem/Observed_Masc, 2)) %>%
select(location_id, study_id, FM_ratio)
# Filter 2018 data ----
FM_ratio_18 <- FM_ratio %>%
filter(study_id=="2018_Seattle_Citywide")
# Join the city map with 2018 filtered data ----
FM_ratio_18_geo <- left_join(SEA_map, FM_ratio_18, by = "S_HOOD")
# Dissolve polygons associated with each location_id to a bigger one under each S_Hood----
FM_ratio_18_geo_dissolved <- FM_ratio_18_geo %>%
select(S_HOOD, geometry, FM_ratio)%>%
group_by(S_HOOD) %>%
summarize(geometry = st_union(geometry),
FM_ratio = FM_ratio)%>%
filter(!is.na(FM_ratio))
# Extract the centroid for each S_HOOD (including lat and long)----
centroids <- FM_ratio_18_geo_dissolved%>%
st_centroid()%>%
mutate(
S_hood_longitude = st_coordinates(centroids)[ ,"X"],
S_hood_latitude = st_coordinates(centroids)[ , "Y"]
)%>%
select(S_HOOD, S_hood_longitude, S_hood_latitude)%>%
as.data.frame()
centroids <- FM_ratio_18_geo_dissolved%>%
st_centroid()
centroids
str(centroids)
# Extract the centroid for each S_HOOD (including lat and long)----
centroids <- FM_ratio_18_geo_dissolved%>%
st_centroid()%>%
mutate(
S_hood_longitude = st_coordinates(centroids)[ ,1],
S_hood_latitude = st_coordinates(centroids)[ , 1]
)%>%
select(S_HOOD, S_hood_longitude, S_hood_latitude)%>%
as.data.frame()
centroids
#Merge by S_Hood----
FM_ratio_18_geo <- left_join(FM_ratio_18_geo, centroids, by = "S_HOOD")
# Extract the centroid for each S_HOOD (including lat and long)----
centroids <- FM_ratio_18_geo_dissolved%>%
st_centroid()%>%
mutate(
S_hood_longitude = st_coordinates(centroids)[ ,1],
S_hood_latitude = st_coordinates(centroids)[ , 1]
)%>%
select(S_HOOD, S_hood_longitude, S_hood_latitude)%>%
as.data.frame()
# Filter 2018 data ----
FM_ratio_18 <- FM_ratio %>%
filter(study_id=="2018_Seattle_Citywide")
# Join the city map with 2018 filtered data ----
FM_ratio_18_geo <- left_join(SEA_map, FM_ratio_18, by = "S_HOOD")
# Dissolve polygons associated with each location_id to a bigger one under each S_Hood----
FM_ratio_18_geo_dissolved <- FM_ratio_18_geo %>%
select(S_HOOD, geometry, FM_ratio)%>%
group_by(S_HOOD) %>%
summarize(geometry = st_union(geometry),
FM_ratio = FM_ratio)%>%
filter(!is.na(FM_ratio))
# Extract the centroid for each S_HOOD (including lat and long)----
centroids <- FM_ratio_18_geo_dissolved%>%
st_centroid()%>%
mutate(
S_hood_longitude = st_coordinates(centroids)[ ,1],
S_hood_latitude = st_coordinates(centroids)[ , 1]
)%>%
select(S_HOOD, S_hood_longitude, S_hood_latitude)%>%
as.data.frame()
# Dissolve polygons associated with each location_id to a bigger one under each S_Hood----
FM_ratio_18_geo_dissolved <- FM_ratio_18_geo %>%
select(S_HOOD, geometry, FM_ratio)%>%
group_by(S_HOOD) %>%
summarize(geometry = st_union(geometry),
FM_ratio = FM_ratio)%>%
filter(!is.na(FM_ratio))
FM_ratio_18_geo_dissolved
# Creating the plot with each dot representing a neighborhood
ggplot() +
geom_sf(data = FM_ratio_18_geo, aes(fill = FM_ratio)) +
#geom_text(data = FM_ratio_18_geo, aes(label = S_HOOD, x = S_hood_longitude, y = S_hood_latitude), size = 2, color = "black", hjust = 0.4, vjust = 0.5) + #Add the text label
scale_fill_gradient(name = "Female-to-male staying ratio",
low = "lightblue", high = "pink", na.value = "gray",
guide = guide_colorbar(title.position = "top")) +
labs(title = "2018 Female-to-Male Staying Ratio by Seattle Neighborhood ") +
theme_minimal()+
theme(
plot.title = element_text(family = "Times New Roman", size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
# Create the interactive plot ----
ggplot() +
geom_sf(data = FM_ratio_18_geo, aes(fill = FM_ratio, text = paste("Neighborhood: ", S_HOOD, "<br>Female-to-Male Ratio: ", FM_ratio))) +
# geom_text(data = FM_ratio_18_geo, aes(label = S_HOOD, x=longitude, y=latitude), size = 3, color = "black", check_overlap = TRUE)+ #Need to troubleshoot
scale_fill_gradient(name = "Female-to-male staying ratio",
low = "lightblue", high = "pink", na.value = "gray",
guide = guide_colorbar(title.position = "top")) +
labs(title = "2018 Female-to-Male Staying Ratio by Seattle Neighborhood ") +
theme_minimal()+
theme(
plot.title = element_text(family = "Times New Roman", size = 16, face = "bold")
)
p <- ggplotly(, tooltip = "text")
P
p
# Creating the plot----
ggplot() +
geom_sf(data = FM_ratio_18_geo, aes(fill = FM_ratio)) +
#geom_text(data = FM_ratio_18_geo, aes(label = S_HOOD, x = S_hood_longitude, y = S_hood_latitude), size = 2, color = "black", hjust = 0.4, vjust = 0.5) + #Add the text label
scale_fill_gradient(name = "Female-to-male staying ratio",
low = "lightblue", high = "pink", na.value = "gray",
guide = guide_colorbar(title.position = "top")) +
labs(title = "2018 Female-to-Male Staying Ratio by Seattle Neighborhood ") +
theme_minimal()+
theme(
plot.title = element_text(family = "Times New Roman", size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
# Save 2018 map as an PNG in the Visualization folder ----
ggsave(filename = "2018_FMratio_map.png", path = here("Visualization"), bg="white", height = 7, width = 7)
# Create the interactive plot ----
ggplot() +
geom_sf(data = FM_ratio_18_geo, aes(fill = FM_ratio, text = paste("Neighborhood: ", S_HOOD, "<br>Female-to-Male Ratio: ", FM_ratio))) +
# geom_text(data = FM_ratio_18_geo, aes(label = S_HOOD, x=longitude, y=latitude), size = 3, color = "black", check_overlap = TRUE)+ #Need to troubleshoot
scale_fill_gradient(name = "Female-to-male staying ratio",
low = "lightblue", high = "pink", na.value = "gray",
guide = guide_colorbar(title.position = "top")) +
labs(title = "2018 Female-to-Male Staying Ratio by Seattle Neighborhood ") +
theme_minimal()+
theme(
plot.title = element_text(family = "Times New Roman", size = 16, face = "bold")
)%>%
ggplotly(tooltip = "text")
# Create the interactive plot ----
ggplot() +
geom_sf(data = FM_ratio_18_geo, aes(fill = FM_ratio, text = paste("Neighborhood: ", S_HOOD, "<br>Female-to-Male Ratio: ", FM_ratio))) +
# geom_text(data = FM_ratio_18_geo, aes(label = S_HOOD, x=longitude, y=latitude), size = 3, color = "black", check_overlap = TRUE)+ #Need to troubleshoot
scale_fill_gradient(name = "Female-to-male staying ratio",
low = "lightblue", high = "pink", na.value = "gray",
guide = guide_colorbar(title.position = "top")) +
labs(title = "2018 Female-to-Male Staying Ratio by Seattle Neighborhood ") +
theme_minimal()+
theme(
plot.title = element_text(family = "Times New Roman", size = 16, face = "bold")
)%>%
ggplotly(,tooltip = "text")
# Create the interactive plot ----
p <- ggplot() +
geom_sf(data = FM_ratio_18_geo, aes(fill = FM_ratio, text = paste("Neighborhood: ", S_HOOD, "<br>Female-to-Male Ratio: ", FM_ratio))) +
# geom_text(data = FM_ratio_18_geo, aes(label = S_HOOD, x=longitude, y=latitude), size = 3, color = "black", check_overlap = TRUE)+ #Need to troubleshoot
scale_fill_gradient(name = "Female-to-male staying ratio",
low = "lightblue", high = "pink", na.value = "gray",
guide = guide_colorbar(title.position = "top")) +
labs(title = "2018 Female-to-Male Staying Ratio by Seattle Neighborhood ") +
theme_minimal()+
theme(
plot.title = element_text(family = "Times New Roman", size = 16, face = "bold")
)
p <- ggplotly(, tooltip = "text")
#Save the interactive plot ----
saveWidget(p, here("Visualization", "2018_map_interactive.html"), selfcontained = FALSE, libdir = "libs")
# Dissolve polygons associated with each location_id to a bigger one under each S_Hood----
FM_ratio_18_geo_dissolved <- FM_ratio_18_geo %>%
select(S_HOOD, geometry, FM_ratio)%>%
group_by(S_HOOD) %>%
summarize(geometry = st_union(geometry),
FM_ratio = FM_ratio)%>%
filter(!is.na(FM_ratio))
# Extract the centroid for each S_HOOD (including lat and long)----
centroids <- FM_ratio_18_geo_dissolved%>%
st_centroid()%>%
mutate(
S_hood_longitude = st_coordinates(centroids)[ ,1],
S_hood_latitude = st_coordinates(centroids)[ , 1]
)%>%
select(S_HOOD, S_hood_longitude, S_hood_latitude)%>%
as.data.frame()
# Extract the centroid for each S_HOOD (including lat and long)----
centroids <- FM_ratio_18_geo_dissolved%>%
st_centroid()%>%
mutate(
S_hood_longitude = st_coordinates(.)[ ,1],
S_hood_latitude = st_coordinates(.)[ , 1]
)%>%
select(S_HOOD, S_hood_longitude, S_hood_latitude)%>%
as.data.frame()
centroids
#Merge by S_Hood----
FM_ratio_18_geo <- left_join(FM_ratio_18_geo, centroids, by = "S_HOOD")
# Creating the plot----
ggplot() +
geom_sf(data = FM_ratio_18_geo, aes(fill = FM_ratio)) +
geom_text(data = FM_ratio_18_geo, aes(label = S_HOOD, x = S_hood_longitude, y = S_hood_latitude), size = 2, color = "black", hjust = 0.4, vjust = 0.5) + #Add the text label
scale_fill_gradient(name = "Female-to-male staying ratio",
low = "lightblue", high = "pink", na.value = "gray",
guide = guide_colorbar(title.position = "top")) +
labs(title = "2018 Female-to-Male Staying Ratio by Seattle Neighborhood ") +
theme_minimal()+
theme(
plot.title = element_text(family = "Times New Roman", size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
FM_ratio_18_geo
centroids
# Filter 2018 data ----
FM_ratio_18 <- FM_ratio %>%
filter(study_id=="2018_Seattle_Citywide")
# Join the city map with 2018 filtered data ----
FM_ratio_18_geo <- left_join(SEA_map, FM_ratio_18, by = "S_HOOD")
# Dissolve polygons associated with each location_id to a bigger one under each S_Hood----
FM_ratio_18_geo_dissolved <- FM_ratio_18_geo %>%
select(S_HOOD, geometry, FM_ratio)%>%
group_by(S_HOOD) %>%
summarize(geometry = st_union(geometry),
FM_ratio = FM_ratio)%>%
filter(!is.na(FM_ratio))
# Extract the centroid for each S_HOOD (including lat and long)----
centroids <- FM_ratio_18_geo_dissolved%>%
st_centroid()%>%
mutate(
S_hood_longitude = st_coordinates(.)[ ,1],
S_hood_latitude = st_coordinates(.)[ , 1]
)%>%
select(S_HOOD, S_hood_longitude, S_hood_latitude)%>%
as.data.frame()
centroids
# Filter 2018 data ----
FM_ratio_18 <- FM_ratio %>%
filter(study_id=="2018_Seattle_Citywide")
# Join the city map with 2018 filtered data ----
FM_ratio_18_geo <- left_join(SEA_map, FM_ratio_18, by = "S_HOOD")
# Dissolve polygons associated with each location_id to a bigger one under each S_Hood----
FM_ratio_18_geo_dissolved <- FM_ratio_18_geo %>%
select(S_HOOD, geometry, FM_ratio)%>%
group_by(S_HOOD) %>%
summarize(geometry = st_union(geometry),
FM_ratio = FM_ratio)%>%
filter(!is.na(FM_ratio))
# Extract the centroid for each S_HOOD (including lat and long)----
centroids <- FM_ratio_18_geo_dissolved%>%
st_centroid()%>%
st_drop_geometry()%>%
mutate(
S_hood_longitude = st_coordinates(.)[ ,1],
S_hood_latitude = st_coordinates(.)[ , 1]
)%>%
select(S_HOOD, S_hood_longitude, S_hood_latitude)%>%
as.data.frame()
# Extract the centroid for each S_HOOD (including lat and long)----
centroids <- FM_ratio_18_geo_dissolved%>%
st_centroid()%>%
mutate(
S_hood_longitude = st_coordinates(.)[ ,1],
S_hood_latitude = st_coordinates(.)[ , 1]
)%>%
st_drop_geometry()%>%
as.data.frame()
centroids
# Extract the centroid for each S_HOOD (including lat and long)----
centroids <- FM_ratio_18_geo_dissolved%>%
st_centroid()%>%
mutate(
S_hood_longitude = st_coordinates(.)[ ,1],
S_hood_latitude = st_coordinates(.)[ , 1]
)%>%
st_drop_geometry()%>% #Drop the geometry column
as.data.frame()
#Merge by S_Hood----
FM_ratio_18_geo <- left_join(FM_ratio_18_geo, centroids, by = "S_HOOD")
# Creating the plot----
ggplot() +
geom_sf(data = FM_ratio_18_geo, aes(fill = FM_ratio)) +
geom_text(data = FM_ratio_18_geo, aes(label = S_HOOD, x = S_hood_longitude, y = S_hood_latitude), size = 2, color = "black", hjust = 0.4, vjust = 0.5) + #Add the text label
scale_fill_gradient(name = "Female-to-male staying ratio",
low = "lightblue", high = "pink", na.value = "gray",
guide = guide_colorbar(title.position = "top")) +
labs(title = "2018 Female-to-Male Staying Ratio by Seattle Neighborhood ") +
theme_minimal()+
theme(
plot.title = element_text(family = "Times New Roman", size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
FM_ratio_18_geo
# Filter 2018 data ----
FM_ratio_18 <- FM_ratio %>%
filter(study_id=="2018_Seattle_Citywide")
# Join the city map with 2018 filtered data ----
FM_ratio_18_geo <- left_join(SEA_map, FM_ratio_18, by = "S_HOOD")
# Creating the plot----
ggplot() +
geom_sf(data = FM_ratio_18_geo, aes(fill = FM_ratio)) +
scale_fill_gradient(name = "Female-to-male staying ratio",
low = "lightblue", high = "pink", na.value = "gray",
guide = guide_colorbar(title.position = "top")) +
labs(title = "2018 Female-to-Male Staying Ratio by Seattle Neighborhood ") +
theme_minimal()+
theme(
plot.title = element_text(family = "Times New Roman", size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
# Save 2018 map as an PNG in the Visualization folder ----
ggsave(filename = "2018_FMratio_map.png", path = here("Visualization"), bg="white", height = 7, width = 7)
# Create the interactive plot ----
p <- ggplot() +
geom_sf(data = FM_ratio_18_geo, aes(fill = FM_ratio, text = paste("Neighborhood: ", S_HOOD, "<br>Female-to-Male Ratio: ", FM_ratio))) +
# geom_text(data = FM_ratio_18_geo, aes(label = S_HOOD, x=longitude, y=latitude), size = 3, color = "black", check_overlap = TRUE)+ #Need to troubleshoot
scale_fill_gradient(name = "Female-to-male staying ratio",
low = "lightblue", high = "pink", na.value = "gray",
guide = guide_colorbar(title.position = "top")) +
labs(title = "2018 Female-to-Male Staying Ratio by Seattle Neighborhood ") +
theme_minimal()+
theme(
plot.title = element_text(family = "Times New Roman", size = 16, face = "bold")
)
p <- ggplotly(, tooltip = "text")
#Save the interactive plot ----
saveWidget(p, here("Visualization", "2018_map_interactive.html"), selfcontained = FALSE, libdir = "libs")
p
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
library(psych)
library(dplyr)
library(sf)
library(here)
library(leaflet)
rm(list=ls())
library(tidyverse)
library(psych)
library(dplyr)
library(sf)
library(here)
library(ggplot2)
library(plotly) #interactive plots
library(htmlwidgets)
SPL_1823 <- read.csv(here("data","SPL_1823.csv"))
SPL_1823_geo <- st_read(here("data", "SPL_1823_location.geojson")) # location_id shapefiles and lat/long coordinates
SEA_map <- st_read(here("data/raw","04_SPL_Seattle_Map.geojson")) # base SEA neighborhood map
SPL_1823 <- SPL_1823 %>%
mutate(
gender=recode(staying_gender,
"Female"="Fem",
"Feminine presenting"="Fem",
"Gender-non-conforming presenting" = "non_conforming",
"Male"="Masc",
"Masculine presenting"="Masc",
"Other_Unsure"="Unsure",
"Unsure"="Unsure"))
# table(SPL_1823$gender)
# table(SPL_1823$staying_gender)
FM_ratio <- SPL_1823 %>%
group_by(S_HOOD, gender, study_id) %>%
dplyr::summarise(count= n()) %>%
pivot_wider(
id_cols = c(S_HOOD, study_id),
names_from = gender,
values_from = count,
names_prefix = "Observed_"
) %>%
mutate(FM_ratio = round(Observed_Fem/Observed_Masc, 2)) %>%
select(S_HOOD, study_id, FM_ratio)
FM_ratio_locid <- SPL_1823 %>%
group_by(location_id, gender, study_id) %>%
dplyr::summarise(count = n()) %>%
pivot_wider(
id_cols = c(location_id, study_id),
names_from = gender,
values_from = count,
names_prefix = "Observed_"
) %>%
mutate(FM_ratio = round(Observed_Fem/Observed_Masc, 2)) %>%
select(location_id, study_id, FM_ratio)
# Filter 2018 data ----
FM_ratio_18 <- FM_ratio %>%
filter(study_id=="2018_Seattle_Citywide")
# Join the city map with 2018 filtered data ----
FM_ratio_18_geo <- left_join(SEA_map, FM_ratio_18, by = "S_HOOD")
# Creating the plot----
ggplot() +
geom_sf(data = FM_ratio_18_geo, aes(fill = FM_ratio)) +
scale_fill_gradient(name = "Female-to-male staying ratio",
low = "lightblue", high = "pink", na.value = "gray",
guide = guide_colorbar(title.position = "top")) +
labs(title = "2018 Female-to-Male Staying Ratio by Seattle Neighborhood ") +
theme_minimal()+
theme(
plot.title = element_text(family = "Times New Roman", size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
# Save 2018 map as an PNG in the Visualization folder ----
#ggsave(filename = "2018_FMratio_map.png", path = here("Visualization"), bg="white", height = 7, width = 7)
# Create the interactive plot ----
ggplot() +
geom_sf(data = FM_ratio_18_geo, aes(fill = FM_ratio, text = paste("Neighborhood: ", S_HOOD, "<br>Female-to-Male Ratio: ", FM_ratio))) +
# geom_text(data = FM_ratio_18_geo, aes(label = S_HOOD, x=longitude, y=latitude), size = 3, color = "black", check_overlap = TRUE)+ #Need to troubleshoot
scale_fill_gradient(name = "Female-to-male staying ratio",
low = "lightblue", high = "pink", na.value = "gray",
guide = guide_colorbar(title.position = "top")) +
labs(title = "2018 Female-to-Male Staying Ratio by Seattle Neighborhood ") +
theme_minimal()+
theme(
plot.title = element_text(family = "Times New Roman", size = 16, face = "bold")
)
#p <- ggplotly(, tooltip = "text")
#Save the interactive plot ----
#saveWidget(p, here("Visualization", "2018_map_interactive.html"), selfcontained = FALSE, libdir = "libs")
# Filter 2023 data ----
FM_ratio_23 <- FM_ratio %>%
filter(study_id=="2023_Seattle_Citywide")
# Join the city map with 2023 filtered data ---
FM_ratio_23_geo <- left_join(SEA_map, FM_ratio_23, by = "S_HOOD")
ggplot() +
geom_sf(data = FM_ratio_23_geo, aes(fill = FM_ratio)) +
# geom_text(data = FM_ratio_23_geo, aes(label = S_HOOD, x=longitude, y=latitude), size = 3, color = "black", check_overlap = TRUE)+ #Need to troubleshoot
scale_fill_gradient(name = "Female-to-male staying ratio",
low = "lightblue", high = "pink", na.value = "gray",
guide = guide_colorbar(title.position = "top")) +
labs(title = "2023 Female-to-Male Staying Ratio by Seattle Neighborhood ") +
theme_minimal()+
theme(
plot.title = element_text(family = "Times New Roman", size = 16, face = "bold")
)
# Save 2023 map as an PNG in the Visualization folder ----
#ggsave(filename = "2023_FMratio_map.png", path = here("Visualization"), bg="white", width = 7, height = 7)
# Filter 2018 data ----
FM_ratio_18_locid <- FM_ratio_locid %>% filter(study_id == "2018_Seattle_Citywide")
# Join location_id coordinates with 2018 filtered data ----
FM_ratio_18_locid_geo <- left_join(FM_ratio_18_locid, SPL_1823_geo, by = "location_id")
ggplot() +
geom_sf(data = SEA_map) + #plot base SEA neighborhood map
geom_point(data=FM_ratio_18_locid_geo, aes(x=longitude, y=latitude, color = FM_ratio,
alpha = 0.95),shape=20, size=4) + # add points
scale_color_gradientn(name="Female to Male Staying Ratio",
colours = c("brown","lightyellow","blue"), #Specify the colors for each end
breaks = c(0, 0.5, 1, 1.5, 2, max(FM_ratio_18_locid_geo$FM_ratio))) + #Create the breaks
scale_alpha_continuous(guide = "none")+
labs(title = "2018 Female-to-Male Staying Ratio by Observation Site") +
labs(fill="Observation Sites")
# Save Map_2018_dot in the Visualization folder ----
ggsave(filename = "2018_FMratio_map_dot.png", path = here("Visualization"), bg="white", width = 7, height = 7)
p <- ggplot() +
geom_sf(data = SEA_map) + #plot base SEA neighborhood map
geom_point(data=FM_ratio_18_locid_geo, aes(x=longitude, y=latitude, color = FM_ratio,
text = paste("Block Face: ", location_id, "<br>Female-to-Male Ratio: ", FM_ratio),
alpha = 0.95),shape=20, size=4) + # add points
scale_color_gradientn(name="Female to Male Staying Ratio",
colours = c("brown","lightyellow","blue"), #Specify the colors for each end
breaks = c(0, 0.5, 1, 1.5, 2, max(FM_ratio_18_locid_geo$FM_ratio))) + #Create the breaks
scale_alpha_continuous(guide = "none")+
labs(title = "2018 Female-to-Male Staying Ratio by Observation Site (interactive)") +
labs(fill="Observation Sites")
ggplotly(p, tooltip = "text")
# Filter 2023 data ----
FM_ratio_23_locid <- FM_ratio_locid %>% filter(study_id == "2023_Seattle_Citywide")
# Join location_id coordinates with 2023 filtered data ----
FM_ratio_23_locid_geo <- left_join(FM_ratio_23_locid, SPL_1823_geo, by = "location_id")
ggplot() +
geom_sf(data = SEA_map) + #plot base SEA neighborhood map
geom_point(data=FM_ratio_23_locid_geo, aes(x=longitude, y=latitude, color = FM_ratio, alpha = 0.9),shape=20, size=4) + # add points
scale_color_gradientn(name="Female to Male Staying Ratio",
colours = c("brown","lightyellow","blue"), #Specify the colors for each end
breaks = c(0, 0.5, 1, 1.5, 2, max(FM_ratio_23_locid_geo$FM_ratio))) + #Create the breaks
scale_alpha_continuous(guide = "none")+
labs(title = "2023 Female-to-Male Staying Ratio by Observation Site") +
labs(fill="Observation Sites")
# Save Map_2023_dot in the Visualization folder ----
ggsave(filename = "2023_FMratio_map_dot.png", path = here("Visualization"), bg="white", width = 7, height = 7)
p <- ggplot() +
geom_sf(data = SEA_map) + #plot base SEA neighborhood map
geom_point(data=FM_ratio_23_locid_geo, aes(x=longitude, y=latitude, color = FM_ratio,
text = paste("Block Face: ", location_id, "<br>Female-to-Male Ratio: ", FM_ratio),
alpha = 0.9),shape=20, size=4) + # add points
scale_color_gradientn(name="Female to Male Staying Ratio",
colours = c("brown","lightyellow","blue"), #Specify the colors for each end
breaks = c(0, 0.5, 1, 1.5, 2, max(FM_ratio_23_locid_geo$FM_ratio))) + #Create the breaks
scale_alpha_continuous(guide = "none")+
labs(title = "2023 Female-to-Male Staying Ratio by Observation Site") +
labs(fill="Observation Sites")
ggplotly(p, tooltip = "text")
